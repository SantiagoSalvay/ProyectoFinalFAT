generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TipoUsuario {
  id_tipo_usuario Int      @id @default(autoincrement())
  tipo_usuario    String
  usuarios        Usuario[]
}

model Usuario {
  id_usuario                Int                    @id @default(autoincrement())
  nombre                    String
  apellido                  String
  biografia                 String?
  email                     String                 @unique
  contrasena                String?
  id_tipo_usuario           Int
  ubicacion                 String?
  createdAt                 DateTime               @default(now())
<<<<<<< HEAD
  email_verified            Boolean                @default(false)
  reset_token               String?
  reset_token_expiry        DateTime?
  verification_token        String?
  verification_token_expiry DateTime?
  auth_provider             String                 @default("email")
  facebook_id               String?                @unique
  google_id                 String?                @unique
  profile_picture           String?
  twitter_id                String?                @unique
  bio                       String?
  banned_at                 DateTime?
  banned_reason             String?
  banned_until              DateTime?
  is_banned                 Boolean                @default(false)
  warnings_count            Int                    @default(0)
  calificacionesRecibidas   CalificacionONG[]      @relation("ONGCalificada")
  calificacionesRealizadas  CalificacionONG[]      @relation("UsuarioCalificador")
  foros                     Foro[]
  likes                     MeGustaForo[]
  infracciones              ModerationInfraction[]
  pedidos                   PedidoDonacion[]
  rankings                  Ranking[]
  respuestas                RespuestaForo[]
  tiposONG                  TipoONG[]
  tipo                      TipoUsuario            @relation(fields: [tipo_usuario], references: [tipo_usuario])
}

model Foro {
  id_foro         Int              @id @default(autoincrement())
  id_usuario      Int
  titulo          String
  descripcion     String
  fecha           DateTime
  ubicacion       String?
  usuario         Usuario          @relation(fields: [id_usuario], references: [id_usuario])
  foroCategorias  ForoCategoria[]
  likes           MeGustaForo[]
  pedidosDonacion PedidoDonacion[]
  respuestas      RespuestaForo[]
=======
  
  // Relaciones
  tipo                      TipoUsuario            @relation(fields: [id_tipo_usuario], references: [id_tipo_usuario])
  detalleUsuario            DetalleUsuario?
  publicaciones             Publicacion[]
  calificacionesRecibidas   CalificacionONG[]      @relation("ONGCalificada")
  calificacionesRealizadas  CalificacionONG[]      @relation("UsuarioCalificador")
  infracciones              Infracciones[]
  pedidosRealizados         PedidoDonacion[]       @relation("UsuarioDonador")
  pedidosEvaluados          PedidoDonacion[]       @relation("ONGEvaluadora")
  rankings                  Ranking[]
  respuestas                RespuestaPublicacion[]
  tiposONG                  TipoONG[]
}

model DetalleUsuario {
  id_detalle_usuario        Int      @id @default(autoincrement())
  id_usuario                Int      @unique
  email_verified            Boolean  @default(false)
  auth_provider             String   @default("email")
  facebook_id               String?  @unique
  google_id                 String?  @unique
  profile_picture           String?
  twitter_id                String?  @unique
  puntosActuales            Int      @default(0)
  ultima_fecha_actualizacion DateTime @default(now())
  
  // Relaciones
  usuario                   Usuario  @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
>>>>>>> 5852541dee2db0f050d3c69eb5c350463cc64c64
}

model Publicacion {
  id_publicacion                Int                    @id @default(autoincrement())
  id_usuario                    Int
  titulo                        String
  descripcion_publicacion       String
  num_megusta                   Int                    @default(0)
  fecha_publicacion             DateTime               @default(now())
  ultima_fecha_actualizacion    DateTime               @default(now())
  ubicacion                     String?
  
  // Relaciones
  usuario                       Usuario                @relation(fields: [id_usuario], references: [id_usuario])
  publicacionEtiquetas          PublicacionEtiqueta[]
  respuestas                    RespuestaPublicacion[]
}

model Etiqueta {
  id_etiqueta Int                   @id @default(autoincrement())
  etiqueta    String
  publicacionEtiquetas PublicacionEtiqueta[]
}

model PublicacionEtiqueta {
  id_publicacion_etiqueta Int       @id @default(autoincrement())
  id_publicacion          Int
  id_etiqueta             Int
  
  // Relaciones
  publicacion             Publicacion @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)
  etiqueta                Etiqueta    @relation(fields: [id_etiqueta], references: [id_etiqueta], onDelete: Cascade)
  pedidosDonacion         PedidoDonacion[]
}

model TipoDonacion {
  id_tipo_donacion Int             @id @default(autoincrement())
  tipo_donacion    String
  descripcion      String
  puntos           Int
  pedidosDonacion  PedidoDonacion[]
}

model PedidoDonacion {
  id_pedido                  Int                   @id @default(autoincrement())
  id_publicacion_etiqueta    Int
  id_usuario                 Int
  id_tipo_donacion           Int
  cantidad                   Int
  fecha_donacion             DateTime              @default(now())
  
  // Campos específicos para voluntariado
  id_ong_evaluadora          Int?
  descripcion_voluntariado   String?
  horas_donadas              Int?
  estado_evaluacion          String                @default("pendiente")
  puntos_otorgados           Int?
  fecha_evaluacion           DateTime?
  
  // Relaciones
  publicacionEtiqueta        PublicacionEtiqueta   @relation(fields: [id_publicacion_etiqueta], references: [id_publicacion_etiqueta])
  usuario                    Usuario               @relation("UsuarioDonador", fields: [id_usuario], references: [id_usuario])
  tipoDonacion               TipoDonacion          @relation(fields: [id_tipo_donacion], references: [id_tipo_donacion])
  ongEvaluadora              Usuario?              @relation("ONGEvaluadora", fields: [id_ong_evaluadora], references: [id_usuario])
}

model CalificacionONG {
  id_calificacion   Int      @id @default(autoincrement())
  id_ong            Int
  id_usuario        Int
  puntuacion        Float
  comentario        String?
  fecha_calificacion DateTime @default(now())
  
  // Relaciones
  ong               Usuario  @relation("ONGCalificada", fields: [id_ong], references: [id_usuario], onDelete: Cascade)
  usuario           Usuario  @relation("UsuarioCalificador", fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  
  @@unique([id_ong, id_usuario])
}

model Infracciones {
  id_infraccion        Int              @id @default(autoincrement())
  id_usuario           Int
  contenido            String
  id_tipo_infraccion   Int
  fecha_infraccion     DateTime         @default(now())
  fecha_expiracion     DateTime?
  
  // Relaciones
  usuario              Usuario          @relation(fields: [id_usuario], references: [id_usuario])
  tipoInfraccion       TipoInfraccion   @relation(fields: [id_tipo_infraccion], references: [id_tipo_infraccion])
}

model TipoInfraccion {
  id_tipo_infraccion Int           @id @default(autoincrement())
  tipo_infraccion    String
  severidad          String
  infracciones       Infracciones[]
}

model TipoONG {
  id_tipo_ong    Int     @id @default(autoincrement())
  grupo_social   String
  necesidad      String
  id_usuario     Int
  
  // Relaciones
  usuario        Usuario @relation(fields: [id_usuario], references: [id_usuario])
}

model RespuestaPublicacion {
  id_respuesta         Int                   @id @default(autoincrement())
  id_respuesta_padre   Int?
  id_publicacion       Int
  id_usuario           Int
  mensaje              String
  fecha_respuesta      DateTime              @default(now())
  moderated_at         DateTime?
  moderation_status    String                @default("pending")
  rejection_reason     String?
  
  // Relaciones
  respuestaPadre       RespuestaPublicacion? @relation("RespuestaPadre", fields: [id_respuesta_padre], references: [id_respuesta])
  respuestasHijas      RespuestaPublicacion[] @relation("RespuestaPadre")
  publicacion          Publicacion           @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)
  usuario              Usuario               @relation(fields: [id_usuario], references: [id_usuario])
}

model Ranking {
  id_ranking      Int            @id @default(autoincrement())
  id_tipo_ranking Int
  id_usuario      Int
  puesto          Int
  puntos          Int
  
  // Relaciones
  tipoRanking     TipoRanking    @relation(fields: [id_tipo_ranking], references: [id_tipo_ranking])
  usuario         Usuario        @relation(fields: [id_usuario], references: [id_usuario])
}

model TipoRanking {
  id_tipo_ranking Int       @id @default(autoincrement())
  tipo_ranking    String
  rankings        Ranking[]
}

// Modelo para registros pendientes de verificación de email
model RegistroPendiente {
  id                 Int      @id @default(autoincrement())
  nombre             String
  apellido           String
  usuario            String
  correo             String   @unique
  contrasena         String
  ubicacion          String?
  verification_token String   @unique
  token_expiry       DateTime
  createdAt          DateTime @default(now())
  tipo_usuario       Int
<<<<<<< HEAD
}

model TipoONG {
  ID_tipo      Int      @id @default(autoincrement())
  grupo_social String?
  necesidad    String?
  usuarioId    Int?
  tipo_ong     String?
  usuario      Usuario? @relation(fields: [usuarioId], references: [id_usuario])
}

model ModerationInfraction {
  id              Int       @id @default(autoincrement())
  user_id         Int
  infraction_type String
  severity        String
  content         String?
  action_taken    String
  created_at      DateTime  @default(now())
  expires_at      DateTime?
  usuario         Usuario   @relation(fields: [user_id], references: [id_usuario])
}

model MeGustaForo {
  id_megusta Int      @id @default(autoincrement())
  id_foro    Int
  id_usuario Int
  fecha      DateTime @default(now())
  foro       Foro     @relation(fields: [id_foro], references: [id_foro], onDelete: Cascade)
  usuario    Usuario  @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)

  @@unique([id_foro, id_usuario])
}

model CalificacionONG {
  id_calificacion Int      @id @default(autoincrement())
  id_ong          Int
  id_usuario      Int
  puntuacion      Int
  comentario      String?
  fecha           DateTime @default(now())
  ong             Usuario  @relation("ONGCalificada", fields: [id_ong], references: [id_usuario], onDelete: Cascade)
  usuario         Usuario  @relation("UsuarioCalificador", fields: [id_usuario], references: [id_usuario], onDelete: Cascade)

  @@unique([id_ong, id_usuario])
}
=======
}
>>>>>>> 5852541dee2db0f050d3c69eb5c350463cc64c64
