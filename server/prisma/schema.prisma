generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TipoUsuario {
  tipo_usuario      Int      @id @default(autoincrement())
  nombre_tipo_usuario String
  usuarios          Usuario[]
}

model Usuario {
  id_usuario           Int      @id @default(autoincrement())
  nombre               String
  apellido             String
  usuario              String   @unique
  telefono             String
  correo               String   @unique
  contrasena           String
  tipo_usuario         Int
  ubicacion            String?
  is_email_verified    Boolean  @default(false)
  is_phone_verified    Boolean  @default(false)
  verification_token   String?
  phone_code          String?
  verification_expires DateTime?
  tipo                TipoUsuario @relation(fields: [tipo_usuario], references: [tipo_usuario])
  foros               Foro[]
  respuestas          RespuestaForo[]
  pedidos             PedidoDonacion[]
  rankings            Ranking[]
}

model Foro {
  id_foro       Int    @id @default(autoincrement())
  id_usuario    Int
  titulo        String
  descripcion   String
  fecha         DateTime
  usuario       Usuario  @relation(fields: [id_usuario], references: [id_usuario])
  foroCategorias ForoCategoria[]
  respuestas    RespuestaForo[]
  pedidosDonacion PedidoDonacion[]
}

model Categoria {
  id_categoria   Int    @id @default(autoincrement())
  etiqueta       String
  foroCategorias ForoCategoria[]
}

model ForoCategoria {
  id_foro_categoria Int @id @default(autoincrement())
  id_foro           Int
  id_categoria      Int
  foro              Foro      @relation(fields: [id_foro], references: [id_foro])
  categoria         Categoria @relation(fields: [id_categoria], references: [id_categoria])
  pedidos           PedidoDonacion[]
}

model RespuestaForo {
  id_respuesta Int      @id @default(autoincrement())
  id_foro      Int
  id_usuario   Int
  mensaje      String
  fecha        DateTime
  foro         Foro     @relation(fields: [id_foro], references: [id_foro])
  usuario      Usuario  @relation(fields: [id_usuario], references: [id_usuario])
}

model Donacion {
  id_donacion   Int    @id @default(autoincrement())
  tipo_donacion String
  descripcion   String
  puntos        Int
  pedidos       PedidoDonacion[]
}

model PedidoDonacion {
  id_pedido    Int    @id @default(autoincrement())
  id_foro_categoria Int
  id_usuario   Int
  id_donacion  Int
  id_foro      Int
  descripcion  String
  cantidad     Int
  fecha        DateTime
  foroCategoria ForoCategoria @relation(fields: [id_foro_categoria], references: [id_foro_categoria], map: "PedidoDonacion_foroCategoria")
  usuario      Usuario  @relation(fields: [id_usuario], references: [id_usuario])
  donacion     Donacion @relation(fields: [id_donacion], references: [id_donacion])
  rankings     Ranking[]
  foro         Foro     @relation(fields: [id_foro], references: [id_foro], map: "PedidoDonacion_foro")
}

model Ranking {
  id_ranking      Int    @id @default(autoincrement())
  id_tipo_ranking Int
  id_pedido       Int
  id_usuario      Int
  puesto          Int
  puntos          Int
  tipoRanking     TipoRanking @relation(fields: [id_tipo_ranking], references: [id_tipo_ranking])
  pedido          PedidoDonacion @relation(fields: [id_pedido], references: [id_pedido])
  usuario         Usuario @relation(fields: [id_usuario], references: [id_usuario])
}

model TipoRanking {
  id_tipo_ranking Int    @id @default(autoincrement())
  tipo_ranking    String
  rankings        Ranking[]
}