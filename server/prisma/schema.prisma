generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TipoUsuario {
  id_tipo_usuario Int       @id @default(autoincrement())
  tipo_usuario    String
  usuarios        Usuario[]
}

model Usuario {
  id_usuario               Int                    @id @default(autoincrement())
  nombre                   String
  apellido                 String
  biografia                String?
  email                    String                 @unique
  contrasena               String?
  id_tipo_usuario          Int
  ubicacion                String?
  createdAt                DateTime               @default(now())
  coordenadas              String?
  redes_sociales           String?
  telefono                 String?
  calificacionesRecibidas  CalificacionONG[]      @relation("ONGCalificada")
  calificacionesRealizadas CalificacionONG[]      @relation("UsuarioCalificador")
  DetalleUsuario           DetalleUsuario?
  infracciones             Infracciones[]
  passwordResetTokens      PasswordResetToken[]
  pedidosEvaluados         PedidoDonacion[]       @relation("ONGEvaluadora")
  pedidosRealizados        PedidoDonacion[]       @relation("UsuarioDonador")
  publicaciones            Publicacion[]
  publicacionLikes         PublicacionLike[]
  rankings                 Ranking[]
  respuestas               RespuestaPublicacion[]
  tiposONG                 TipoONG[]
  categorias               ONGCategoria[]
  notificaciones           Notificacion[]
  tipo                     TipoUsuario            @relation(fields: [id_tipo_usuario], references: [id_tipo_usuario])
}

model DetalleUsuario {
  id_detalle_usuario         Int       @id @default(autoincrement())
  id_usuario                 Int       @unique
  email_verified             Boolean   @default(false)
  auth_provider              String    @default("email")
  facebook_id                String?   @unique
  google_id                  String?   @unique
  profile_picture            String?
  twitter_id                 String?   @unique
  puntosActuales             Int       @default(0)
  ultima_fecha_actualizacion DateTime  @default(now())
  mp_token_cipher            String?
  mp_token_iv                String?
  mp_token_tag               String?
  mp_enabled                 Boolean   @default(false)
  mp_onboarded_at            DateTime?
  Usuario                    Usuario   @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
}

model Publicacion {
  id_publicacion             Int                    @id @default(autoincrement())
  id_usuario                 Int
  titulo                     String
  descripcion_publicacion    String
  num_megusta                Int                    @default(0)
  fecha_publicacion          DateTime               @default(now())
  ultima_fecha_actualizacion DateTime               @default(now())
  ubicacion                  String?
  imagenes                   String?
  usuario                    Usuario                @relation(fields: [id_usuario], references: [id_usuario])
  publicacionEtiquetas       PublicacionEtiqueta[]
  respuestas                 RespuestaPublicacion[]
  likes                      PublicacionLike[]
}

model PublicacionLike {
  id_like        Int         @id @default(autoincrement())
  id_publicacion Int
  id_usuario     Int
  createdAt      DateTime    @default(now())
  publicacion    Publicacion @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)
  usuario        Usuario     @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)

  @@unique([id_publicacion, id_usuario], name: "id_publicacion_id_usuario")
}

model Etiqueta {
  id_etiqueta          Int                   @id @default(autoincrement())
  etiqueta             String
  publicacionEtiquetas PublicacionEtiqueta[]
}

model PublicacionEtiqueta {
  id_publicacion_etiqueta Int              @id @default(autoincrement())
  id_publicacion          Int
  id_etiqueta             Int
  pedidosDonacion         PedidoDonacion[]
  etiqueta                Etiqueta         @relation(fields: [id_etiqueta], references: [id_etiqueta], onDelete: Cascade)
  publicacion             Publicacion      @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)
}

model TipoDonacion {
  id_tipo_donacion Int              @id @default(autoincrement())
  tipo_donacion    String
  descripcion      String
  puntos           Int
  pedidosDonacion  PedidoDonacion[]
}

model PedidoDonacion {
  id_pedido                Int                 @id @default(autoincrement())
  id_publicacion_etiqueta  Int
  id_usuario               Int
  id_tipo_donacion         Int
  cantidad                 Int
  fecha_donacion           DateTime            @default(now())
  id_ong_evaluadora        Int?
  descripcion_voluntariado String?
  horas_donadas            Int?
  estado_evaluacion        String              @default("pendiente")
  puntos_otorgados         Int?
  fecha_evaluacion         DateTime?
  ongEvaluadora            Usuario?            @relation("ONGEvaluadora", fields: [id_ong_evaluadora], references: [id_usuario])
  publicacionEtiqueta      PublicacionEtiqueta @relation(fields: [id_publicacion_etiqueta], references: [id_publicacion_etiqueta])
  tipoDonacion             TipoDonacion        @relation(fields: [id_tipo_donacion], references: [id_tipo_donacion])
  usuario                  Usuario             @relation("UsuarioDonador", fields: [id_usuario], references: [id_usuario])
}

model CalificacionONG {
  id_calificacion    Int      @id @default(autoincrement())
  id_ong             Int
  id_usuario         Int
  puntuacion         Float
  comentario         String?
  fecha_calificacion DateTime @default(now())
  ong                Usuario  @relation("ONGCalificada", fields: [id_ong], references: [id_usuario], onDelete: Cascade)
  usuario            Usuario  @relation("UsuarioCalificador", fields: [id_usuario], references: [id_usuario], onDelete: Cascade)

  @@unique([id_ong, id_usuario])
}

model Infracciones {
  id_infraccion      Int            @id @default(autoincrement())
  id_usuario         Int
  contenido          String
  id_tipo_infraccion Int
  fecha_infraccion   DateTime       @default(now())
  fecha_expiracion   DateTime?
  tipoInfraccion     TipoInfraccion @relation(fields: [id_tipo_infraccion], references: [id_tipo_infraccion])
  usuario            Usuario        @relation(fields: [id_usuario], references: [id_usuario])
}

model TipoInfraccion {
  id_tipo_infraccion Int            @id @default(autoincrement())
  tipo_infraccion    String
  severidad          String
  infracciones       Infracciones[]
}

model TipoONG {
  id_tipo_ong  Int     @id @default(autoincrement())
  grupo_social String
  necesidad    String
  id_usuario   Int
  usuario      Usuario @relation(fields: [id_usuario], references: [id_usuario])
}

model RespuestaPublicacion {
  id_respuesta       Int                    @id @default(autoincrement())
  id_respuesta_padre Int?
  id_publicacion     Int
  id_usuario         Int
  mensaje            String
  fecha_respuesta    DateTime               @default(now())
  moderated_at       DateTime?
  moderation_status  String                 @default("pending")
  rejection_reason   String?
  publicacion        Publicacion            @relation(fields: [id_publicacion], references: [id_publicacion], onDelete: Cascade)
  respuestaPadre     RespuestaPublicacion?  @relation("RespuestaPadre", fields: [id_respuesta_padre], references: [id_respuesta])
  respuestasHijas    RespuestaPublicacion[] @relation("RespuestaPadre")
  usuario            Usuario                @relation(fields: [id_usuario], references: [id_usuario])
}

model Ranking {
  id_ranking      Int         @id @default(autoincrement())
  id_tipo_ranking Int
  id_usuario      Int
  puesto          Int
  puntos          Int
  tipoRanking     TipoRanking @relation(fields: [id_tipo_ranking], references: [id_tipo_ranking])
  usuario         Usuario     @relation(fields: [id_usuario], references: [id_usuario])
}

model TipoRanking {
  id_tipo_ranking Int       @id @default(autoincrement())
  tipo_ranking    String
  rankings        Ranking[]
}

model RegistroPendiente {
  id                 Int      @id @default(autoincrement())
  nombre             String
  apellido           String
  usuario            String
  correo             String   @unique
  contrasena         String
  ubicacion          String?
  verification_token String   @unique
  token_expiry       DateTime
  createdAt          DateTime @default(now())
  tipo_usuario       Int
  coordenadas        String?
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  id_usuario Int
  token      String   @unique
  expiry     DateTime
  createdAt  DateTime @default(now())
  used       Boolean  @default(false)
  usuario    Usuario  @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)

  @@index([token])
  @@index([id_usuario])
}

model Categoria {
  id_categoria Int             @id @default(autoincrement())
  nombre       String          @unique
  descripcion  String?
  color        String?
  icono        String?
  createdAt    DateTime        @default(now())
  ongCategorias ONGCategoria[]
}

model ONGCategoria {
  id_ong_categoria Int       @id @default(autoincrement())
  id_usuario       Int
  id_categoria     Int
  createdAt        DateTime  @default(now())
  usuario          Usuario   @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  categoria        Categoria @relation(fields: [id_categoria], references: [id_categoria], onDelete: Cascade)

  @@unique([id_usuario, id_categoria])
  @@index([id_usuario])
  @@index([id_categoria])
}

model Notificacion {
  id_notificacion   Int      @id @default(autoincrement())
  id_usuario        Int
  tipo_notificacion String
  mensaje           String   @db.Text
  leida             Boolean  @default(false)
  fecha_creacion    DateTime @default(now())
  usuario           Usuario  @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)

  @@index([id_usuario])
  @@index([leida])
}

model SolicitudRevisionIPJ {
  id                 Int       @id @default(autoincrement())
  email              String
  nombre             String
  nombre_legal       String?
  cuit               String
  matricula          String?
  tipo_organizacion  String    // 'asociacion_civil' o 'fundacion'
  ubicacion          String?
  razon              String    @db.Text
  estado             String    @default("pendiente") // 'pendiente', 'aprobada', 'rechazada'
  notas_admin        String?   @db.Text
  fecha_solicitud    DateTime  @default(now())
  fecha_revision     DateTime?

  @@index([email])
  @@index([estado])
  @@index([cuit])
}