generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RegistroPendiente {
  id                 Int      @id @default(autoincrement())
  nombre             String
  apellido           String
  usuario            String
  correo             String   @unique
  contrasena         String
  ubicacion          String?
  verification_token String   @unique
  token_expiry       DateTime
  createdAt          DateTime @default(now())
  tipo_usuario       Int
}

model TipoUsuario {
  tipo_usuario        Int       @id @default(autoincrement())
  nombre_tipo_usuario String
  usuarios            Usuario[]
}

model Usuario {
  id_usuario                Int              @id @default(autoincrement())
  nombre                    String
  apellido                  String
  usuario                   String           @unique
  correo                    String           @unique
  contrasena                String
  tipo_usuario              Int
  ubicacion                 String?
  createdAt                 DateTime         @default(now())
  email_verified            Boolean          @default(false)
  reset_token               String?
  reset_token_expiry        DateTime?
  verification_token        String?
  verification_token_expiry DateTime?
  foros                     Foro[]
  pedidos                   PedidoDonacion[]
  Ranking                   Ranking[]
  respuestas                RespuestaForo[]
  tipo                      TipoUsuario      @relation(fields: [tipo_usuario], references: [tipo_usuario])
  tiposONG                  TipoONG[]
}

model Foro {
  id_foro        Int              @id @default(autoincrement())
  id_usuario     Int
  titulo         String
  descripcion    String
  fecha          DateTime
  usuario        Usuario          @relation(fields: [id_usuario], references: [id_usuario])
  foroCategorias ForoCategoria[]
  PedidoDonacion PedidoDonacion[]
  respuestas     RespuestaForo[]
}

model RespuestaForo {
  id_respuesta Int      @id @default(autoincrement())
  id_foro      Int
  id_usuario   Int
  mensaje      String
  fecha        DateTime
  foro         Foro     @relation(fields: [id_foro], references: [id_foro])
  usuario      Usuario  @relation(fields: [id_usuario], references: [id_usuario])
}

model Categoria {
  id_categoria   Int             @id @default(autoincrement())
  etiqueta       String
  foroCategorias ForoCategoria[]
}

model ForoCategoria {
  id_foro_categoria Int              @id @default(autoincrement())
  id_foro           Int
  id_categoria      Int
  categoria         Categoria        @relation(fields: [id_categoria], references: [id_categoria])
  foro              Foro             @relation(fields: [id_foro], references: [id_foro])
  PedidoDonacion    PedidoDonacion[]
}

model Donacion {
  id_donacion   Int              @id @default(autoincrement())
  tipo_donacion String
  descripcion   String
  puntos        Int
  pedidos       PedidoDonacion[]
}

model PedidoDonacion {
  id_pedido         Int           @id @default(autoincrement())
  id_foro_categoria Int
  id_usuario        Int
  id_donacion       Int
  id_foro           Int
  descripcion       String
  cantidad          Int
  fecha             DateTime
  Foro              Foro          @relation(fields: [id_foro], references: [id_foro], map: "PedidoDonacion_foro")
  ForoCategoria     ForoCategoria @relation(fields: [id_foro_categoria], references: [id_foro_categoria], map: "PedidoDonacion_foroCategoria")
  donacion          Donacion      @relation(fields: [id_donacion], references: [id_donacion])
  usuario           Usuario       @relation(fields: [id_usuario], references: [id_usuario])
  rankings          Ranking[]
}

model TipoRanking {
  id_tipo_ranking Int       @id @default(autoincrement())
  tipo_ranking    String
  rankings        Ranking[]
}

model Ranking {
  id_ranking      Int            @id @default(autoincrement())
  id_tipo_ranking Int
  id_pedido       Int
  id_usuario      Int
  puesto          Int
  puntos          Int
  pedido          PedidoDonacion @relation(fields: [id_pedido], references: [id_pedido])
  tipoRanking     TipoRanking    @relation(fields: [id_tipo_ranking], references: [id_tipo_ranking])
  Usuario         Usuario        @relation(fields: [id_usuario], references: [id_usuario])
}

// Modelo para tipos de ONG, vinculado opcionalmente a Usuario (solo tipo 2)
model TipoONG {
  ID_tipo      Int      @id @default(autoincrement())
  grupo_social String?
  necesidad    String?
  usuarioId    Int?
  usuario      Usuario? @relation(fields: [usuarioId], references: [id_usuario])
}
