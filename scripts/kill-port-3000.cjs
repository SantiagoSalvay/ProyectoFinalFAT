const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

async function killPort3000() {
  try {
    console.log('üõë [KILL] Matando todos los procesos en puerto 3000...\n');

    // 1. Obtener todos los PIDs en puerto 3000
    console.log('üîç [KILL] Buscando procesos en puerto 3000...');
    const { stdout } = await execAsync('netstat -ano | findstr :3000');
    
    if (!stdout.trim()) {
      console.log('‚úÖ [KILL] No hay procesos en puerto 3000');
      return;
    }

    console.log('üìã [KILL] Procesos encontrados:');
    console.log(stdout);

    // 2. Extraer PIDs √∫nicos
    const lines = stdout.split('\n').filter(line => line.trim());
    const pids = new Set();
    
    lines.forEach(line => {
      const parts = line.trim().split(/\s+/);
      if (parts.length >= 5) {
        const pid = parts[parts.length - 1];
        if (pid && pid !== '0') {
          pids.add(pid);
        }
      }
    });

    console.log(`\nüéØ [KILL] PIDs √∫nicos encontrados: ${Array.from(pids).join(', ')}`);

    // 3. Matar cada PID
    for (const pid of pids) {
      try {
        console.log(`üõë [KILL] Matando proceso PID: ${pid}`);
        await execAsync(`taskkill /F /PID ${pid}`);
        console.log(`‚úÖ [KILL] Proceso ${pid} matado exitosamente`);
      } catch (error) {
        console.log(`‚ö†Ô∏è [KILL] No se pudo matar proceso ${pid}: ${error.message}`);
      }
    }

    // 4. Verificar que el puerto est√© libre
    console.log('\nüîç [KILL] Verificando que el puerto est√© libre...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    try {
      const { stdout: checkOutput } = await execAsync('netstat -ano | findstr :3000');
      if (checkOutput.trim()) {
        console.log('‚ö†Ô∏è [KILL] A√∫n hay procesos en puerto 3000:');
        console.log(checkOutput);
      } else {
        console.log('‚úÖ [KILL] Puerto 3000 est√° completamente libre');
      }
    } catch (error) {
      console.log('‚úÖ [KILL] Puerto 3000 est√° completamente libre');
    }

    console.log('\nüöÄ [KILL] Ahora puedes reiniciar el servidor frontend:');
    console.log('   1. Ve a la ra√≠z del proyecto');
    console.log('   2. Ejecuta: pnpm dev');

  } catch (error) {
    console.error('‚ùå [KILL] Error durante el proceso:', error);
  }
}

// Ejecutar la funci√≥n
killPort3000();
